#!/usr/bin/env node

// Module Dependencies
var app = require('../app');
var debug = require('debug')('steam-api:server');
var http = require('http');
var colors = require('colors/safe');
var ip = require('ip');

// Get port from environment and store in Express.
var port = normalizePort(process.env.PORT || '3000');
app.set('port', port);

// Create HTTP server.
var server = http.createServer(app);

// Listen on provided port, on all network interfaces.
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

// Normalize a port into a number, string, or false.
function normalizePort(val) {
    let portInt = parseInt(val, 10);
    return isNaN(portInt) ? val : portInt || false; 
}

// Function for error messages.
function onError(err) {
    if (err.syscall !== 'listen') {
        throw err;
    }

    let bind = typeof port === 'string'
        ? 'Pipe ' + port 
        : 'Port ' + port;

    // handle specific listening errors with friendly messages.
    switch (err.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        break;
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        break;
        default:
            throw err;
    }
}

// Function for when the server begins listening
function onListening() {
    let addr = server.address();
    let bind = typeof addr === 'string'
        ? 'Pipe ' + addr
        : 'Port ' + addr.port;
    debug('Listening on ' + bind);

    // Display a friendly message in the console indicating the server has started:
    console.log(''
        + 'steam-api is listening on '
        + colors.green('http://' + ip.address() + ':' + app.get('port'))
        + ' in ' + colors.yellow(app.get('env')) + ' mode.\n'
    );
}

